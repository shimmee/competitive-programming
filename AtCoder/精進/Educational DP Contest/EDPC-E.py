# Educational DP Contest: E - Knapsack 2
# URL: https://atcoder.jp/contests/dp/tasks/dp_e
# 日付: 2020/12/25

# ---------- 思ったこと / 気づいたこと ----------
# 耐荷重が10**9なので，D問題のようなDPテーブルは作れない
# そのかわり価値が10**3なので，軸が重さの代わりに価値のDPデーブルを作る


# ------------------- 方針 --------------------
# dp[i][j]: i番目までの品物が選択可能で，価値がj以上となるように選択したときの，最小の重さ
# 行列の行が品物，列が価値を表す
# 重さがW以下で，価値が最大のものをdpとともに常に更新し続ける

# ------------------- 解答 --------------------
#code:python
def getXY(n):
    xy = [map(int, input().split()) for _ in range(n)]
    x, y = [list(i) for i in zip(*xy)]
    return x, y

n, W = map(int, input().split())
w, v = getXY(n)
V = sum(v)

dp = [[float('INF')]*(V+1) for _ in range(n+1)]
dp[0][0] = 0 # 初期値: 何も入れないで価値が0のときは，重さが0

ans = 0 # 最大の価値をここにぶち込む
for i in range(n): # 品物のループ
    for j in range(V+1): # 価値のループ
        if j - v[i] >= 0: # i番目の品物を選ぶ時
            dp[i+1][j] = min(dp[i+1][j], dp[i][j-v[i]] + w[i])

        # i番目の品物を選ばないとき:
        dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])

        # もし今回更新した選択の重さがW以下なら，価値jでansを更新
        if dp[i+1][j] <= W:
            ans = max(ans, j)
print(ans)


# ------------------ 入力例 -------------------
3 8
3 30
4 50
5 60

1 1000000000
1000000000 10

6 15
6 5
5 6
6 4
6 6
3 5
7 2

# ----------------- 解答時間 ------------------
# 33分

# -------------- 解説 / 感想 / 反省 -------------
# https://kyopro-friends.hatenablog.com/entry/2019/01/12/230931
# 重さじゃなくて価値をdpテーブルにするのは初めてだったので，時間がかかってしまった
# 今回のように添え字を入れ替えるのは頻出らしい
# あらいさん:「～となる〇〇の最大値」を値に持つDPは、適当な添字と入れ替えて「～となる××の最小値」というDPにできることが多いのだ！

# ----------------- カテゴリ ------------------
#EDPC
#動的計画法
#DP
#復習したい
#ナップザックDP