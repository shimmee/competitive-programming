# Educational DP Contest: D - Knapsack 1
# URL: https://atcoder.jp/contests/dp/tasks/dp_d
# 日付: 2020/12/25

# ---------- 思ったこと / 気づいたこと ----------
# 普通のナップザック

# ------------------- 方針 --------------------
# dp[i][j]: i番目までの品物を使用可能として，重さj以下になるように選んだときの価値の最大値

# ------------------- 解答 --------------------
#code:python
n, W = map(int, input().split())
def getXY(n):
    xy = [map(int, input().split()) for _ in range(n)]
    x, y = [list(i) for i in zip(*xy)]
    return x, y
w, v = getXY(n)
dp = [[0]*(W+1) for _ in range(n+1)]

for i in range(n):
    for j in range(W+1):
        if j - w[i] >= 0: # i番目の品物を選ぶ時
            dp[i+1][j] = max(dp[i+1][j], dp[i][j-w[i]] + v[i])
        # i番目の品物を選ばないとき
        dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])

print(dp[n][W])

# ------------------ 入力例 -------------------
3 8
3 30
4 50
5 60

5 5
1 1000000000
1 1000000000
1 1000000000
1 1000000000
1 1000000000

6 15
6 5
5 6
6 4
6 6
3 5
7 2

# ----------------- 解答時間 ------------------
# 11分

# -------------- 解説 / 感想 / 反省 -------------
# けんちょん本でもやった一番オーソドックスなナップザック

# ----------------- カテゴリ ------------------
#EDPC
#動的計画法
#DP
#ナップザックDP